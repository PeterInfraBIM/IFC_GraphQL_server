enum IfcElementCompositionEnum {
	COMPLEX
	ELEMENT
	PARTIAL
}

enum IfcDirectionSenseEnum {
	POSITIVE
	NEGATIVE
}

enum IfcLayerSetDirectionEnum {
	AXIS1
	AXIS2
	AXIS3
}

enum IfcProfileTypeEnum {
	CURVE
	AREA
}


interface Addressable {
	type: String!
	globalId: ID!
}

interface IfcRoot {
	name: String
	description: String
}

interface IfcObjectDefinition {
	isDecomposedByRef: [Ref!]
	isDecomposedBy: [RelAggregates!]
	isDecomposedByDir: [IfcObjectDefinition!]
	decomposesRef: [Ref!]
	decomposes: [RelAggregates!]
	decomposesDir: [IfcObjectDefinition!]
}

interface IfcObject {
	isDefinedByRef: [Ref!]
	isDefinedBy: [RelDefinesByProperties!]
}

interface IfcProduct {
	objectPlacement: LocalPlacement
	representation: ProductRepresentation
}

interface IfcElement {
	hasAssociationsRef: [Ref!]
	hasAssociations: [IfcRelAssociates!]
}

interface IfcRelAssociates {
	relatedObjectsRef: [Ref!]
}

interface IfcSpatialStructureElement {
	compositionType: IfcElementCompositionEnum
	containsElementsRef: [Ref!]
	containsElements: [RelContainedInSpatialStructure!]
	containsElementsDir: [IfcProduct!]
}

type Ref {
	type: String!
	ref: String!
}

type Root implements Addressable & IfcRoot {
	type: String!
	globalId: ID!
	name: String
	description: String
}

type ObjectDefinition implements Addressable & IfcRoot & IfcObjectDefinition {
	type: String!
	globalId: ID!
	name: String
	description: String
	# is decomposed by [reference]
	isDecomposedByRef: [Ref!]
	# is decomposed by [objectified relation]
	isDecomposedBy: [RelAggregates!]
	# is decomposed by [directly linked]
	isDecomposedByDir: [ObjectDefinition!]
	# decomposes [reference]
	decomposesRef: [Ref!]
	# decomposes [objectified relation]
	decomposes: [RelAggregates!]
	# decomposes [directly linked]
	decomposesDir: [ObjectDefinition!]
}

type ProductRepresentation {
	representationsRef: [Ref!]
	representations: [ShapeRepresentation!]
}

type ShapeRepresentation {
	type: String!
	globalId: String!
	contextOfItemsRef: Ref
	representationIdentifier: String
	representationType: String
	items: [RepresentationItem!]
	ofProductRepresentation: [ProductRepresentation!]
}

union RepresentationItem = Polyline | ExtrudedAreaSolid

type Polyline {
	type: String!
	points: [CartesianPoint!]
}

type ExtrudedAreaSolid  {
	type: String!
	extrudedDirection: Direction
	depth: Float
	position: Axis2Placement3D
	sweptArea: ArbitraryClosedProfileDef
}

type ArbitraryClosedProfileDef {
	type: String!
	profileType: IfcProfileTypeEnum
	outerCurve: Polyline;
}

type Product implements Addressable & IfcRoot & IfcObjectDefinition & IfcProduct {
	type: String!
	globalId: ID!
	name: String
	description: String
	# is decomposed by [reference]
	isDecomposedByRef: [Ref!]
	# is decomposed by [objectified relation]
	isDecomposedBy: [RelAggregates!]
	# is decomposed by [directly linked]
	isDecomposedByDir: [ObjectDefinition!]
	# decomposes [reference]
	decomposesRef: [Ref!]
	# decomposes [objectified relation]
	decomposes: [RelAggregates!]
	# decomposes [directly linked]
	decomposesDir: [ObjectDefinition!]
	objectPlacement: LocalPlacement
	representation: ProductRepresentation
}

type SpatialStructureElement implements Addressable 
										& IfcRoot 
										& IfcObjectDefinition 
										& IfcProduct 
										& IfcSpatialStructureElement {
	type: String!
	globalId: ID!
	name: String
	description: String
	# is decomposed by [reference]
	isDecomposedByRef: [Ref!]
	# is decomposed by [objectified relation]
	isDecomposedBy: [RelAggregates!]
	# is decomposed by [directly linked]
	isDecomposedByDir: [ObjectDefinition!]
	# decomposes [reference]
	decomposesRef: [Ref!]
	# decomposes [objectified relation]
	decomposes: [RelAggregates!]
	# decomposes [directly linked]
	decomposesDir: [ObjectDefinition!]
	objectPlacement: LocalPlacement
	representation: ProductRepresentation
	compositionType: IfcElementCompositionEnum
	containsElementsRef: [Ref!]
	containsElements: [RelContainedInSpatialStructure!]
	containsElementsDir: [Product!]
}

type RelAggregates implements Addressable & IfcRoot {
	type: String!
	globalId: ID!
	name: String
	description: String
	relatingObject: ObjectDefinition
	relatingObjectRef: Ref
	relatedObjects: [ObjectDefinition!]
	relatedObjectsRef: [Ref!]
}

type RelContainedInSpatialStructure implements Addressable & IfcRoot {
	type: String!
	globalId: ID!
	name: String
	description: String
	relatedElements: [Ref]
	relatingStructure: 	Ref
}

type RelAssociates implements Addressable & IfcRoot & IfcRelAssociates {
	type: String!
	globalId: ID!
	name: String
	description: String
	relatedObjectsRef: [Ref!]
}

type RelAssociatesMaterial implements Addressable & IfcRoot & IfcRelAssociates {
	type: String!
	globalId: ID!
	name: String
	description: String
	relatedObjectsRef: [Ref!]
	relatingMaterial: MaterialLayerSetUsage
}

type RelDefinesByProperties implements Addressable & IfcRoot {
	type: String!
	globalId: ID!
	name: String
	description: String
	relatingPropertyDefinitionRef: Ref
	relatingPropertyDefinition: PropertySet
}

type PropertySet implements IfcRoot {
	type: String!
	globalId: ID!
	name: String
	description: String
	hasProperties: [Property!]
}

union Property = PropertySingleValue

union Value = RealValue | BooleanValue

type BooleanValue {
	type: String!
	booleanValue: Boolean
}

type RealValue {
	type: String!
	realValue: Float
}

type PropertySingleValue {
	type: String!
	name: String
	description: String
	nominalValue: Value
}

type MaterialLayerSetUsage {
	type: String!
	forLayerSet: MaterialLayerSet
	layerSetDirection: IfcLayerSetDirectionEnum
	directionSense: IfcDirectionSenseEnum
	offsetFromReferenceLine: Float
}

type MaterialLayerSet{
	type: String!
	materialLayers: [MaterialLayer!]
}

type MaterialLayer {
	type: String!
	material: Material
	layerThickness: Float!
}

type Material {
	type: String!
	name: String
}

type LocalPlacement {
	placementRelTo: LocalPlacement
	relativePlacement: Axis2Placement3D
}

type Axis2Placement3D {
	location: CartesianPoint
	axis: Direction
	refDirection: Direction
}

type CartesianPoint {
	coordinates: [Float]
}

type Direction {
	directionRatios: [Float]
}

type Site implements Addressable & 
					 IfcRoot & 
					 IfcObjectDefinition &
					 IfcProduct &
					 IfcSpatialStructureElement {
	type: String!
	globalId: ID!
	name: String
	description: String
	# is decomposed by [reference]
	isDecomposedByRef: [Ref!]
	# is decomposed by [objectified relation]
	isDecomposedBy: [RelAggregates!]
	# is decomposed by [directly linked]
	isDecomposedByDir: [ObjectDefinition!]
	# decomposes [reference]
	decomposesRef: [Ref!]
	# decomposes [objectified relation]
	decomposes: [RelAggregates!]
	# decomposes [directly linked]
	decomposesDir: [ObjectDefinition!]
	objectPlacement: LocalPlacement
	representation: ProductRepresentation	
	compositionType: IfcElementCompositionEnum
	containsElementsRef: [Ref!]
	containsElements: [RelContainedInSpatialStructure!]
	containsElementsDir: [Product!]
	refLatitude: [Float]
	refLongitude: [Float]
}

type Building implements Addressable & 
						 IfcRoot &
						 IfcObjectDefinition &
					 	 IfcProduct &
					 	 IfcSpatialStructureElement {
	type: String!
	globalId: ID!
	name: String
	description: String
	# is decomposed by [reference]
	isDecomposedByRef: [Ref!]
	# is decomposed by [objectified relation]
	isDecomposedBy: [RelAggregates!]
	# is decomposed by [directly linked]
	isDecomposedByDir: [ObjectDefinition!]
	# decomposes [reference]
	decomposesRef: [Ref!]
	# decomposes [objectified relation]
	decomposes: [RelAggregates!]
	# decomposes [directly linked]
	decomposesDir: [ObjectDefinition!]
	objectPlacement: LocalPlacement
	representation: ProductRepresentation	
	compositionType: IfcElementCompositionEnum
	containsElementsRef: [Ref!]
	containsElements: [RelContainedInSpatialStructure!]
	containsElementsDir: [Product!]
}

# IfcBuildingStorey
type BuildingStorey 
	implements Addressable & IfcRoot & IfcObjectDefinition & IfcProduct & IfcSpatialStructureElement {
	type: String!
	globalId: ID!
	name: String
	description: String
	# is decomposed by [reference]
	isDecomposedByRef: [Ref!]
	# is decomposed by [objectified relation]
	isDecomposedBy: [RelAggregates!]
	# is decomposed by [directly linked]
	isDecomposedByDir: [ObjectDefinition!]
	# decomposes [reference]
	decomposesRef: [Ref!]
	# decomposes [objectified relation]
	decomposes: [RelAggregates!]
	# decomposes [directly linked]
	decomposesDir: [ObjectDefinition!]
	objectPlacement: LocalPlacement
	representation: ProductRepresentation	
	compositionType: IfcElementCompositionEnum
	containsElementsRef: [Ref!]
	containsElements: [RelContainedInSpatialStructure!]
	containsElementsDir: [Product!]
	elevation: Float
}

# IfcWallStandardCase
type WallStandardCase implements Addressable & IfcRoot & IfcObjectDefinition & IfcObject & IfcProduct & IfcElement {
	type: String!
	globalId: ID!
	name: String
	description: String
	# is decomposed by [reference]
	isDecomposedByRef: [Ref!]
	# is decomposed by [objectified relation]
	isDecomposedBy: [RelAggregates!]
	# is decomposed by [directly linked]
	isDecomposedByDir: [ObjectDefinition!]
	# decomposes [reference]
	decomposesRef: [Ref!]
	# decomposes [objectified relation]
	decomposes: [RelAggregates!]
	# decomposes [directly linked]
	decomposesDir: [ObjectDefinition!]
	objectPlacement: LocalPlacement
	isDefinedByRef: [Ref!]
	isDefinedBy: [RelDefinesByProperties!]
	representation: ProductRepresentation
	hasAssociationsRef: [Ref!]
	hasAssociations: [RelAssociatesMaterial!]
}

type Query {
	# Get all Root objects
	allRoots: [Root]
	# Get all ObjectDefinition objects
	allObjectDefinitions: [ObjectDefinition]
	# Get all Product objects
	allProducts: [Product]
	# Get all SpatialStructureElement objects
	allSpatialStructureElements: [SpatialStructureElement]
	# Get all Site objects
	allSites: [Site]	
	# Get all Building objects
	allBuildings: [Building]	
	# Get one Building object
	oneBuilding(globalId: String!): Building
	# Get all BuildingStorey objects
	allBuildingStoreys: [BuildingStorey]
	# Get one BuildingStorey object
	oneBuildingStorey(globalId: String!): BuildingStorey
	# Get all RelAggregates objects
	allRelAggregates: [RelAggregates]
	# Get all RelContainedInSpatialStructure objects
	allRelContainedInSpatialStructures: [RelContainedInSpatialStructure]
	# Get all RelAssociates objects
	allRelAssociates: [RelAssociates]
	# Get all RelAssociatesMaterial objects
	allRelAssociatesMaterials: [RelAssociatesMaterial]
	# Get all RelDefinesByProperties objects
	allRelDefinesByProperties: [RelDefinesByProperties]
	# Get all WallStandardCase objects
	allWallStandardCases: [WallStandardCase]
	# Get all PropertySetDefinition objects
	allPropertySets: [PropertySet]
	getTestPolyline: Polyline
	getTestExtrudedAreaSolid: ExtrudedAreaSolid
	getTestRepresentationItem: RepresentationItem
	getTestArbitraryClosedProfileDef: ArbitraryClosedProfileDef
	getTestPropertySingleValue: PropertySingleValue
	getTestValue: Value
	getTestBooleanValue: BooleanValue
	getTestRealValue: RealValue
}

schema {
  query: Query
}